{"pageProps":{"implementationsPageData":{"id":"python","contentHtml":"<h1>Python SSZ Implementations</h1>\n<h2><strong>From <a href=\"https://github.com/ethereum/py-ssz\">PY-SSZ</a></strong></h2>\n<p><a href=\"https://gitter.im/ethereum/py-ssz?utm_source=badge&#x26;utm_medium=badge&#x26;utm_campaign=pr-badge&#x26;utm_content=badge\"><img src=\"https://badges.gitter.im/ethereum/py-ssz.svg\" alt=\"Join the chat at https://gitter.im/ethereum/py-ssz\"></a>\n<a href=\"https://circleci.com/gh/ethereum/py-ssz\"><img src=\"https://circleci.com/gh/ethereum/py-ssz.svg?style=shield\" alt=\"Build Status\"></a>\n<a href=\"https://badge.fury.io/py/ssz\"><img src=\"https://badge.fury.io/py/ssz.svg\" alt=\"PyPI version\"></a>\n<a href=\"https://pypi.python.org/pypi/ssz\"><img src=\"https://img.shields.io/pypi/pyversions/ssz.svg\" alt=\"Python versions\"></a>\n<a href=\"http://ssz.readthedocs.io/en/latest/?badge=latest\"><img src=\"https://readthedocs.org/projects/ssz/badge/?version=latest\" alt=\"Docs build\"></a></p>\n<p>Python implementation of the Simple Serialization encoding and decoding</p>\n<p>Read more in the <a href=\"https://ssz.readthedocs.io/\">documentation on ReadTheDocs</a>. <a href=\"https://ssz.readthedocs.io/en/latest/releases.html\">View the change log</a>.</p>\n<h2>Quickstart</h2>\n<pre><code class=\"language-sh\">pip install ssz\n</code></pre>\n<h2>Developer Setup</h2>\n<p>If you would like to hack on py-ssz, please check out the\n<a href=\"https://github.com/pipermerriam/ethereum-dev-tactical-manual\">Ethereum Development Tactical Manual</a>\nfor information on how we do:</p>\n<ul>\n<li>Testing</li>\n<li>Pull Requests</li>\n<li>Code Style</li>\n<li>Documentation</li>\n</ul>\n<h3>Development Environment Setup</h3>\n<p>You can set up your dev environment with:</p>\n<pre><code class=\"language-sh\">git clone git@github.com:ethereum/py-ssz.git\ncd py-ssz\nvirtualenv -p python3 venv\n. venv/bin/activate\npip install -e .[dev]\n</code></pre>\n<h3>Testing Setup</h3>\n<p>During development, you might like to have tests run on every file save.</p>\n<p>Show flake8 errors on file change:</p>\n<pre><code class=\"language-sh\"># Test flake8\nwhen-changed -v -s -r -1 ssz/ tests/ -c \"clear; flake8 ssz tests &#x26;&#x26; echo 'flake8 success' || echo 'error'\"\n</code></pre>\n<p>Run multi-process tests in one command, but without color:</p>\n<pre><code class=\"language-sh\"># in the project root:\npytest --numprocesses=4 --looponfail --maxfail=1\n# the same thing, succinctly:\npytest -n 4 -f --maxfail=1\n</code></pre>\n<p>Run in one thread, with color and desktop notifications:</p>\n<pre><code class=\"language-sh\">cd venv\nptw --onfail \"notify-send -t 5000 'Test failure ⚠⚠⚠⚠⚠' 'python 3 test on py-ssz failed'\" ../tests ../ssz\n</code></pre>\n<h3>Release setup</h3>\n<p>For Debian-like systems:</p>\n<pre><code>apt install pandoc\n</code></pre>\n<p>To release a new version:</p>\n<pre><code class=\"language-sh\">make release bump=$$VERSION_PART_TO_BUMP$$\n</code></pre>\n<h4>How to bumpversion</h4>\n<p>The version format for this repo is <code>{major}.{minor}.{patch}</code> for stable, and\n<code>{major}.{minor}.{patch}-{stage}.{devnum}</code> for unstable (<code>stage</code> can be alpha or beta).</p>\n<p>To issue the next version in line, specify which part to bump,\nlike <code>make release bump=minor</code> or <code>make release bump=devnum</code>. This is typically done from the\nmaster branch, except when releasing a beta (in which case the beta is released from master,\nand the previous stable branch is released from said branch). To include changes made with each\nrelease, update \"docs/releases.rst\" with the changes, and apply commit directly to master\nbefore release.</p>\n<p>If you are in a beta version, <code>make release bump=stage</code> will switch to a stable.</p>\n<p>To issue an unstable version when the current version is stable, specify the\nnew version explicitly, like <code>make release bump=\"--new-version 4.0.0-alpha.1 devnum\"</code></p>\n","title":"pythong","toc":[]}},"__N_SSG":true}