{"pageProps":{"overviewPageData":{"id":"paths","contentHtml":"<h2>Paths</h2>\n<p>Paths are the human-readable variant of <a href=\"./overview/generalized_indices.md\">Generalized Indices</a>.\nTo make paths human-readable, and derive SSZ properties like generalized indices, type information is required.</p>\n<h2>Syntax</h2>\n<p>The human-readable form is simply a <code>/</code>-separated list of path components, starting with the name of the root type.</p>\n<p>Example:</p>\n<pre><code>MyType/some_field/abc_list/123/foobar\n</code></pre>\n<p>Languages may have different levels of expressiveness for these type of paths, and static languages may require templates or code-generation for this.</p>\n<p>The Python-like SSZ spec overloads the <code>/</code> operator to present paths:</p>\n<pre><code class=\"language-python\">ssz_path(MyType) / 'some_field' / 'abc_list' / 123 / 'foobar'\n</code></pre>\n<p><code>ssz_path(ssz_type)</code> here creates a root path element (type <code>Path</code>), to separate path logic from the root (<code>MyType</code> here) itself.</p>\n<p><code>Path</code> objects can also be appended to other paths, but only if the type of the root matches the type of the leaf we are appending to:</p>\n<pre><code>a = ssz_path(MyType) / 'some_field' / 'abc_list'\na.leaf_type() == AbcListType\n\nb = ssz_path(AbcListType) / 123 / 'foobar'\n\ncombined = a / b\ncombined == ssz_path(MyType) / 'some_field' / 'abc_list' / 123 / 'foobar'\n</code></pre>\n<h2>Interface</h2>\n<p>Typed paths offer the following interface:</p>\n<p><code>.leaf_type()</code>: get the type of the end (leaf) of the path.\n<code>.root_type()</code>: get the type of the start (root) of the path.\n<code>.parent()</code>: get the path, without the last component (leaf).\n<code>.generalized_index()</code>: get the generalized index of the path.</p>\n<h2>Paths</h2>\n<p>Paths are the preferred form to express accesses of leaf values in source code:\nin the rare event of changes to a SSZ type (e.g. a fork),\nthe amount of fields or elements may not be the same, and change the generalized index.\nThis would break a generalized index, but not the path.</p>\n<p>However, such changes should be avoided, or prepared for by padding the type (and thus reserving the merkleization space for expected future changes).</p>\n","title":"Paths","section":"Navigation","toc":[],"prev":"classic","next":"summaries_and_expansions"}},"__N_SSG":true}