{"pageProps":{"overviewPageData":{"id":"merkleize","contentHtml":"<div id='Merkelize' align='center'>\n<h1>Merkleize</h1>\n<p>The function <code>merkleize(value)</code> builds a <em><strong>Merkle Tree</strong></em><br>\nand returns the <code>Bytes32</code>  <em><strong>Hash Tree Root</strong></em></p>\n</div>\n<div align='start'>\n<h3><code>merkleize(value)</code> provides <code>hash_tree_root</code> for</h3>\n<ul>\n<li><code>Basic types</code> i.e. <code>unsigned integers</code> of <code>N bytes</code>, known as <code>uintN</code>s, as well as <code>Booleans</code></li>\n<li><code>List</code> and <code>vectors</code> of <code>bits</code>, known as <code>BitLists</code> and <code>BitVectors</code></li>\n<li><code>Lists</code> and <code>vectors</code> of <code>Serializable</code> i.e. either basic or composite types</li>\n<li><code>Containers</code> with <code>Serializable</code> fields</li>\n<li><code>Unions</code></li>\n</ul>\n<h3>To implement <code>hash_tree_root</code> a number of helper functions are required, including</h3>\n<ul>\n<li><code>size_of</code></li>\n<li><code>chunk_count</code></li>\n<li><code>pack</code></li>\n<li><code>pack_bits</code></li>\n<li><code>next_pow_of_two</code></li>\n<li><code>merkleize</code></li>\n<li><code>mix_in_length</code></li>\n<li><code>mix_in_type</code></li>\n</ul>\n","title":"Merkleize","section":"Merkleization","toc":["Merkleize"],"prev":"Hashing","next":"merkleize_helper_functions"}},"__N_SSG":true}