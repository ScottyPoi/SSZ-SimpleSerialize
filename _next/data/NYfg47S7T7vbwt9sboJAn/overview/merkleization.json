{"pageProps":{"overviewPageData":{"id":"merkleization","contentHtml":"<div align='center' id='Merkleization'>\n<h1>Merkleization</h1>\n<br/>\n<h2>The Merkle Tree</h2>\n</div>\n<div id='The%20Merkle%20Tree' align='start'>\n<br/>\n<h3>A <strong>Merkle Tree</strong> is a binary hash tree</h3>\n<ul>\n<li>The values of the <strong>Leaves</strong> of the Merkle Tree are each a <code>Bytes32</code> result of a <code>hash function</code> applied to the serialized objects stored in the tree</li>\n<li>The value of any <strong>parent</strong> node in the Merkle Tree is the result of the same <code>hash function</code> applied to a concatenation of the values of its two <strong>child</strong> nodes.</li>\n<li>The value of the <strong>Root</strong> node is the culmination of the process of hashing pairs of child nodes to reach a single node.\n<ul>\n<li>Referred to in SSZ as <code>hash_tree_root</code></li>\n</ul>\n</li>\n</ul>\n<img src='/merkle_tree.png' alt='merkletree' class='img-fluid'/>\n<!-- **SSZ Merkeleization** aims to provide the following functionality:\n\n<br/>\n\n## `hash_tree_root`\n**`merkleize`** an SSZ object to yield the root.\n\n<br/>\n\nGiven an object `value`, its hash tree root, `hash_tree_root(value)`, is a `BYTES_PER_CHUNK` byte sequence.\n\n<br/>\n\n`BYTES_PER_CHUNK`, 32, is a defined `constant` to represent the number of bytes per chunk. Hence it is equivalent to refer to the output of `hash_tree_root(O)` as being a single chunk. -->\n","title":"merkleization overview","section":"merkleization","toc":["Merkleization","The Merkle Tree"],"prev":"Variable-Size_Objects","next":"Hashing"}},"__N_SSG":true}