{"pageProps":{"overviewPageData":{"id":"basic","contentHtml":"<div align='center'id='Basic%20Types'>\n<h1>Basic Types</h1>\n<br/>\n<h4>SSZ support two <strong>Basic Types</strong>:</h4>\n<br/>\n</div>\n<div align='start'>\n<ol>\n<li>\n<h4><code>Unisigned Integer</code></h4>\n</li>\n<li>\n<h4><code>Boolean</code></h4>\n</li>\n</ol>\n</div>\n<div align='center' id='Unsigned%20Integers'>\n<h2>Unsigned Integers</h2>\n</div>\n<div align='start'>\n<ul>\n<li>\n<p>Type:</p>\n<ul>\n<li><code>uintN</code>, where <code>N</code> can be: <code>8, 16, 32, 64, 128, 256</code>.</li>\n</ul>\n</li>\n<li>\n<p>Aliases:</p>\n<ul>\n<li><code>uint8 &#x3C;-> byte</code></li>\n<li><code>uint256 &#x3C;-> root</code></li>\n</ul>\n</li>\n<li>\n<p>Default value:</p>\n<ul>\n<li><code>0</code></li>\n</ul>\n</li>\n<li>\n<p>Size:</p>\n<ul>\n<li><code>size_of(uintN): N / 8</code></li>\n</ul>\n</li>\n</ul>\n</div>\n<div align='center'>\n<h4>Serialization</h4>\n</div>\n<div align='start'>\n<p>The <code>serialized</code> form on any unsined integer is the <code>Bytes</code> representation of that integer.</p>\n<p>The <code>serialization</code> of <code>uintN</code> is defined using the Python version of <code>int.to_bytes</code>, little-endian.</p>\n</div>\n<div align='center'>\n<h4>Merkleization</h4>\n</div>\n<div align='start'>\n<p>The integers, represented as bytes, are padded on the right side with zeroed bytes to a total of 32 bytes for merkleization.\nNote:</p>\n<ul>\n<li>Some complex types pack smaller integers together into 32 bytes, to reduce the merkleization cost.</li>\n<li>Because of the little-endianness and right-padding, equal integers of different bit-sizes all map to the same 32 bytes value.</li>\n</ul>\n</div>\n<div align='center' id='Booleans'>\n<h2>Booleans</h2>\n</div>\n<div align='start'>\n<ul>\n<li>\n<p>Type: <code>boolean</code></p>\n</li>\n<li>\n<p>Alias: <code>bit</code></p>\n</li>\n<li>\n<p>Default value: <code>False</code></p>\n</li>\n<li>\n<p>Size: <code>1</code></p>\n</li>\n</ul>\n</div>\n<div align='center'>\n<h4>Serialization</h4>\n</div>\n<div align='start'>\n<p>Booleans have two possible values: <code>True</code> or <code>False</code></p>\n<p>The Boolean value <code>false</code> is serialized into a <code>byte</code> of value <code>0</code></p>\n<p>The Boolean value <code>true</code> is serialized into a <code>byte</code> of value <code>1</code></p>\n</div>\n<div align='center'>\n<h4>Merkleization</h4>\n</div>\n<div align='start'>\n<p>The boolean represented as byte is merkleized exactly like <code>byte</code>, including the ability to pack (but only to <code>byte</code> precision, refer to <a href=\"/overview/bitvectors\">bitfields</a> for more efficient packing).</p>\n</div>\n","title":"Basic Types","section":"Types","toc":["Basic Types","Unsigned Integers","Booleans"],"prev":"Typing","next":"Composite_Types"}},"__N_SSG":true}