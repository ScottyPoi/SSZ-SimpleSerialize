{"pageProps":{"implementationsPageData":{"id":"rust","contentHtml":"<h1>SSZ in RUST</h1>\n<h2>From <strong><a href=\"https://github.com/sigp/lighthouse\">Lighthouse</a></strong>:</h2>\n<p>Provides encoding (serialization) and decoding (deserialization) in the SimpleSerialize (SSZ)\nformat designed for use in Ethereum 2.0.</p>\n<p>Adheres to the Ethereum 2.0 <a href=\"https://github.com/ethereum/eth2.0-specs/blob/v0.12.1/ssz/simple-serialize.md\">SSZ\nspecification</a>\nat v0.12.1.</p>\n<h2>Example</h2>\n<pre><code class=\"language-rust\">use ssz_derive::{Encode, Decode};\nuse ssz::{Decode, Encode};\n\n#[derive(PartialEq, Debug, Encode, Decode)]\nstruct Foo {\n    a: u64,\n    b: Vec&#x3C;u16>,\n}\n\nfn ssz_encode_decode_example() {\n    let foo = Foo {\n        a: 42,\n        b: vec![1, 3, 3, 7]\n    };\n\n    let ssz_bytes: Vec&#x3C;u8> = foo.as_ssz_bytes();\n\n    let decoded_foo = Foo::from_ssz_bytes(&#x26;ssz_bytes).unwrap();\n\n    assert_eq!(foo, decoded_foo);\n}\n\n</code></pre>\n<p>See <code>examples/</code> for manual implementations of the <code>Encode</code> and <code>Decode</code> traits.</p>\n<pre><code>mod decode;\nmod encode;\n\npub use decode::{\n    impls::decode_list_of_variable_length_items, Decode, DecodeError, SszDecoder, SszDecoderBuilder,\n};\npub use encode::{Encode, SszEncoder};\n</code></pre>\n<p>The number of bytes used to represent an offset.</p>\n<pre><code>pub const BYTES_PER_LENGTH_OFFSET: usize = 4;\n/// The maximum value that can be represented using `BYTES_PER_LENGTH_OFFSET`.\n#[cfg(target_pointer_width = \"32\")]\npub const MAX_LENGTH_VALUE: usize = (std::u32::MAX >> (8 * (4 - BYTES_PER_LENGTH_OFFSET))) as usize;\n#[cfg(target_pointer_width = \"64\")]\npub const MAX_LENGTH_VALUE: usize = (std::u64::MAX >> (8 * (8 - BYTES_PER_LENGTH_OFFSET))) as usize;\n</code></pre>\n<p>Convenience function to SSZ encode an object supporting</p>\n<pre><code>ssz::Encode.\n</code></pre>\n<p>Equivalent to</p>\n<pre><code>val.as_ssz_bytes()\npub fn ssz_encode&#x3C;T>(val: &#x26;T) -> Vec&#x3C;u8>\nwhere\n    T: Encode,\n{\n    val.as_ssz_bytes()\n}\n</code></pre>\n"}},"__N_SSG":true}