{"pageProps":{"overviewPageData":{"id":"serialization","contentHtml":"<div align='center'>\n<h1>Serialization</h1>\n</br>\n<h5><strong><code>SimpleSerialize</code></strong> follows simple <code>byte</code> conversion, making it effective and efficient for encoding and decoding</h5>\n<h5><code>Serialization</code> encodes the data into <code>Bytes32</code> chunks for merkleization.</h5>\n</div>\n<div align='start'>\n<br/>\n<h4>SSZ provides <code>serialize</code> and <code>deserialize</code> methods for</h4>\n<br />\n<ul>\n<li><strong>Basic types</strong> i.e. integers, Booleans,</li>\n<li><strong>List</strong> and <em>vectors of bits</em>, known as <strong>BitLists</strong> and <strong>BitVectors</strong>,</li>\n<li><strong>Lists</strong> and <strong>Vectors</strong> of <code>type_serializable</code>,</li>\n<li><strong>Containers</strong> with <code>type_serializable</code> <em>fieds</em>,</li>\n<li><strong>Unions</strong> of <code>serializable</code> <em>types</em></li>\n</ul>\n</div>\n<div align='center' id='type%0serializable'>\n<br />\n<h3>\"Type Serializable\"</h3>\n</div>\n<div align='start' >\n<br />\n<p>An object  <em><strong>that can be serialized</strong></em>  is of <code>type_serializable</code></p>\n<p><code>serializable</code> can be thought of as a <code>trait</code></p>\n<p>Given a <code>type T</code>, we write <code>T : Serializable</code> if <code>T</code> extends (or \"inherits\" or \"is a\") <code>Serializable</code>.</p>\n<h5>Each type <code>T:Serialiable</code> should offer two functionalities:</h5>\n<ul>\n<li>\n<h6>Serialize:</h6>\n<ul>\n<li><code>serialize&#x3C;T> : T -> seq&#x3C;bytes></code></li>\n<li>Returns a sequence of bytes when applied to an object of <code>type T</code></li>\n</ul>\n</li>\n<li>\n<h6>Deserialize:</h6>\n<ul>\n<li><code>deserialize&#x3C;T> : seq&#x3C;bytes> ~-> T</code></li>\n<li>Returns an object of <code>type T</code> <em>when it is possible</em> to deserialize a sequence of bytes in an object of <code>type T</code></li>\n</ul>\n</li>\n</ul>\n<br />\n<br />\n<h5>Given two objects <code>O1:T</code> and <code>O2:T</code> where <code>T &#x3C;: Serializable</code>, the pair of functions (<code>serialize&#x3C;T>, deserialize&#x3C;T></code>) should be:</h5>\n<br/>\n<ul>\n<li><strong>Involutive</strong>: <code>deserialize&#x3C;T>( serialize&#x3C;T>(O1) ) = O1</code></li>\n<li><strong>Injective</strong>: <code>serialize&#x3C;T>(O1) = serialize&#x3C;T>(O2)</code> implies that <code>O1 = O2</code></li>\n</ul>\n</div>\n","title":"SSZ Object Serialization","section":"Serialization","toc":[],"prev":"bitfields","next":"Simple_Objects"}},"__N_SSG":true}