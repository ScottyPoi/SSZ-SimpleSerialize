{"ast":null,"code":"export default function SeparateSections(body) {\n  var tmp = body; // Convoluted way of separating each section of the markdown by Headings, regardless of level ## ### or ####\n  // While also preserving the markdown notation\n  // Returns an array of strings in markdown notation\n\n  tmp = tmp.replace(/####/g, \"FOOBARBAZ@@@@\");\n  tmp = tmp.replace(/###/g, \"FOOBARBAZ@@@\");\n  tmp = tmp.replace(/##/g, \"FOOBARBAZ@@\");\n  tmp = tmp.replace(/@/g, \"#\");\n  tmp = tmp.split(\"FOOBARBAZ\");\n  tmp = tmp.filter(function (foo) {\n    return foo !== \"\\r\\n\\r\\n\";\n  });\n  tmp = tmp.join(\"\\n\");\n  tmp = tmp.split(\"\\n\");\n  tmp = tmp.filter(function (foo) {\n    return foo !== \"\\r\" && foo !== \"\";\n  });\n  tmp = tmp.join(\"\\n\");\n  tmp = tmp.replace(/####/g, \"FOOBARBAZ@@@@\");\n  tmp = tmp.replace(/###/g, \"FOOBARBAZ@@@\");\n  tmp = tmp.replace(/##/g, \"FOOBARBAZ@@\");\n  tmp = tmp.replace(/@/g, \"#\");\n  tmp = tmp.split(\"FOOBARBAZ\");\n  tmp = tmp.filter(function (foo) {\n    return foo !== \"\\r\" && foo !== \"\\n\" && foo !== \"\";\n  });\n  return tmp;\n}\n_c = SeparateSections;\n\nvar _c;\n\n$RefreshReg$(_c, \"SeparateSections\");","map":{"version":3,"sources":["C:/Users/kyzam/Documents/GitHub/SSZ-SimpleSerialize/components/SeparateSections.jsx"],"names":["SeparateSections","body","tmp","replace","split","filter","foo","join"],"mappings":"AAAA,eAAe,SAASA,gBAAT,CAA0BC,IAA1B,EAAgC;AAC3C,MAAIC,GAAG,GAAGD,IAAV,CAD2C,CAG3C;AACA;AACA;;AAEAC,EAAAA,GAAG,GAAGA,GAAG,CAACC,OAAJ,CAAY,OAAZ,EAAqB,eAArB,CAAN;AACAD,EAAAA,GAAG,GAAGA,GAAG,CAACC,OAAJ,CAAY,MAAZ,EAAoB,cAApB,CAAN;AACAD,EAAAA,GAAG,GAAGA,GAAG,CAACC,OAAJ,CAAY,KAAZ,EAAmB,aAAnB,CAAN;AACAD,EAAAA,GAAG,GAAGA,GAAG,CAACC,OAAJ,CAAY,IAAZ,EAAkB,GAAlB,CAAN;AACAD,EAAAA,GAAG,GAAGA,GAAG,CAACE,KAAJ,CAAU,WAAV,CAAN;AACAF,EAAAA,GAAG,GAAGA,GAAG,CAACG,MAAJ,CAAW,UAAAC,GAAG;AAAA,WAAIA,GAAG,eAAP;AAAA,GAAd,CAAN;AACAJ,EAAAA,GAAG,GAAGA,GAAG,CAACK,IAAJ,MAAN;AACAL,EAAAA,GAAG,GAAGA,GAAG,CAACE,KAAJ,MAAN;AACAF,EAAAA,GAAG,GAAGA,GAAG,CAACG,MAAJ,CAAW,UAAAC,GAAG;AAAA,WAAIA,GAAG,SAAH,IAAgBA,GAAG,KAAK,EAA5B;AAAA,GAAd,CAAN;AACAJ,EAAAA,GAAG,GAAGA,GAAG,CAACK,IAAJ,MAAN;AACAL,EAAAA,GAAG,GAAGA,GAAG,CAACC,OAAJ,CAAY,OAAZ,EAAqB,eAArB,CAAN;AACAD,EAAAA,GAAG,GAAGA,GAAG,CAACC,OAAJ,CAAY,MAAZ,EAAoB,cAApB,CAAN;AACAD,EAAAA,GAAG,GAAGA,GAAG,CAACC,OAAJ,CAAY,KAAZ,EAAmB,aAAnB,CAAN;AACAD,EAAAA,GAAG,GAAGA,GAAG,CAACC,OAAJ,CAAY,IAAZ,EAAkB,GAAlB,CAAN;AACAD,EAAAA,GAAG,GAAGA,GAAG,CAACE,KAAJ,CAAU,WAAV,CAAN;AACAF,EAAAA,GAAG,GAAGA,GAAG,CAACG,MAAJ,CAAW,UAAAC,GAAG;AAAA,WAAIA,GAAG,SAAH,IAAgBA,GAAG,SAAnB,IAAgCA,GAAG,KAAK,EAA5C;AAAA,GAAd,CAAN;AAEA,SAAOJ,GAAP;AAEH;KA1BuBF,gB","sourcesContent":["export default function SeparateSections(body) {\r\n    let tmp = body;\r\n    \r\n    // Convoluted way of separating each section of the markdown by Headings, regardless of level ## ### or ####\r\n    // While also preserving the markdown notation\r\n    // Returns an array of strings in markdown notation\r\n\r\n    tmp = tmp.replace(/####/g, \"FOOBARBAZ@@@@\");\r\n    tmp = tmp.replace(/###/g, \"FOOBARBAZ@@@\");\r\n    tmp = tmp.replace(/##/g, \"FOOBARBAZ@@\");\r\n    tmp = tmp.replace(/@/g, \"#\")\r\n    tmp = tmp.split(\"FOOBARBAZ\");\r\n    tmp = tmp.filter(foo => foo !== `\\r\\n\\r\\n`);\r\n    tmp = tmp.join(`\\n`);\r\n    tmp = tmp.split(`\\n`);\r\n    tmp = tmp.filter(foo => foo !== `\\r` && foo !== \"\");\r\n    tmp = tmp.join(`\\n`);\r\n    tmp = tmp.replace(/####/g, \"FOOBARBAZ@@@@\");\r\n    tmp = tmp.replace(/###/g, \"FOOBARBAZ@@@\");\r\n    tmp = tmp.replace(/##/g, \"FOOBARBAZ@@\");\r\n    tmp = tmp.replace(/@/g, \"#\")\r\n    tmp = tmp.split(\"FOOBARBAZ\");\r\n    tmp = tmp.filter(foo => foo !== `\\r` && foo !== `\\n` && foo !== \"\");\r\n\r\n    return tmp\r\n\r\n}"]},"metadata":{},"sourceType":"module"}