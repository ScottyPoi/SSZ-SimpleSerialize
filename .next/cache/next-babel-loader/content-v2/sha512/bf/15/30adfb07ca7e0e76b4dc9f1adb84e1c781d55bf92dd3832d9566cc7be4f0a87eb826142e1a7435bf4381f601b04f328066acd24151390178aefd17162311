{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport function getAllOverviewIds() {\n  const fileNames = fs.readdirSync(overviewDirectory); // Returns an array that looks like this:\n  // [\n  //   {\n  //     params: {\n  //       id: 'ssg-ssr'\n  //     }\n  //   },\n  //   {\n  //     params: {\n  //       id: 'pre-rendering'\n  //     }\n  //   }\n  // ]\n\n  return fileNames.map(fileName => {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, '')\n      }\n    };\n  });\n}\nexport async function getOverviewPageData(id) {\n  const fullPath = path.join(overviewDirectory, `${id}.md`);\n  const fileContents = fs.readFileSync(fullPath, 'utf8'); // Use gray-matter to parse the post metadata section\n\n  const matterResult = matter(fileContents); // Use remark to convert markdown into HTML string\n\n  const processedContent = await remark().use(html).process(matterResult.content);\n  const contentHtml = processedContent.toString(); // Combine the data with the id and content Html\n\n  return _objectSpread({\n    id,\n    contentHtml\n  }, matterResult.data);\n}","map":{"version":3,"sources":["C:/Users/kyzam/Documents/GitHub/SSZ-SimpleSerialize/sszapp/lib/overviewpage.jsx"],"names":["getAllOverviewIds","fileNames","fs","readdirSync","overviewDirectory","map","fileName","params","id","replace","getOverviewPageData","fullPath","path","join","fileContents","readFileSync","matterResult","matter","processedContent","remark","use","html","process","content","contentHtml","toString","data"],"mappings":";;;;;;AAAA,OAAO,SAASA,iBAAT,GAA6B;AAChC,QAAMC,SAAS,GAAGC,EAAE,CAACC,WAAH,CAAeC,iBAAf,CAAlB,CADgC,CAGhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAOH,SAAS,CAACI,GAAV,CAAcC,QAAQ,IAAI;AAC/B,WAAO;AACLC,MAAAA,MAAM,EAAE;AACNC,QAAAA,EAAE,EAAEF,QAAQ,CAACG,OAAT,CAAiB,OAAjB,EAA0B,EAA1B;AADE;AADH,KAAP;AAKD,GANM,CAAP;AAOD;AAED,OAAO,eAAeC,mBAAf,CAAmCF,EAAnC,EAAuC;AAC5C,QAAMG,QAAQ,GAAGC,IAAI,CAACC,IAAL,CAAUT,iBAAV,EAA8B,GAAEI,EAAG,KAAnC,CAAjB;AACA,QAAMM,YAAY,GAAGZ,EAAE,CAACa,YAAH,CAAgBJ,QAAhB,EAA0B,MAA1B,CAArB,CAF4C,CAI5C;;AACA,QAAMK,YAAY,GAAGC,MAAM,CAACH,YAAD,CAA3B,CAL4C,CAO3C;;AACD,QAAMI,gBAAgB,GAAG,MAAMC,MAAM,GACpCC,GAD8B,CAC1BC,IAD0B,EAE9BC,OAF8B,CAEtBN,YAAY,CAACO,OAFS,CAA/B;AAGA,QAAMC,WAAW,GAAGN,gBAAgB,CAACO,QAAjB,EAApB,CAX4C,CAa5C;;AACA;AACEjB,IAAAA,EADF;AAEEgB,IAAAA;AAFF,KAGKR,YAAY,CAACU,IAHlB;AAKD","sourcesContent":["export function getAllOverviewIds() {\r\n    const fileNames = fs.readdirSync(overviewDirectory)\r\n  \r\n    // Returns an array that looks like this:\r\n    // [\r\n    //   {\r\n    //     params: {\r\n    //       id: 'ssg-ssr'\r\n    //     }\r\n    //   },\r\n    //   {\r\n    //     params: {\r\n    //       id: 'pre-rendering'\r\n    //     }\r\n    //   }\r\n    // ]\r\n    return fileNames.map(fileName => {\r\n      return {\r\n        params: {\r\n          id: fileName.replace(/\\.md$/, '')\r\n        }\r\n      }\r\n    })\r\n  }\r\n  \r\n  export async function getOverviewPageData(id) {\r\n    const fullPath = path.join(overviewDirectory, `${id}.md`)\r\n    const fileContents = fs.readFileSync(fullPath, 'utf8')\r\n  \r\n    // Use gray-matter to parse the post metadata section\r\n    const matterResult = matter(fileContents)\r\n\r\n     // Use remark to convert markdown into HTML string\r\n    const processedContent = await remark()\r\n    .use(html)\r\n    .process(matterResult.content)\r\n    const contentHtml = processedContent.toString()\r\n  \r\n    // Combine the data with the id and content Html\r\n    return {\r\n      id,\r\n      contentHtml,\r\n      ...matterResult.data\r\n    }\r\n  }\r\n  "]},"metadata":{},"sourceType":"module"}