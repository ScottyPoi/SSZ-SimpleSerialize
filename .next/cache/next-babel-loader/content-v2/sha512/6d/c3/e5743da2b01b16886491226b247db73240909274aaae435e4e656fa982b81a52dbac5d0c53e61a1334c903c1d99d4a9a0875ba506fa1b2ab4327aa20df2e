{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport remark from 'remark';\nimport html from 'remark-html';\nconst overviewDirectory = path.join(process.cwd(), 'overview');\nexport function getAllOverviewIds() {\n  const fileNames = fs.readdirSync(overviewDirectory);\n  return fileNames.map(fileName => {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, '')\n      }\n    };\n  });\n}\nexport async function getOverviewPageData(id) {\n  const fullPath = path.join(overviewDirectory, `${id}.md`);\n  const fileContents = fs.readFileSync(fullPath, 'utf8'); // Use gray-matter to parse the post metadata section\n\n  const matterResult = matter(fileContents); // Use remark to convert markdown into HTML string\n\n  const processedContent = await remark().use(html).process(matterResult.content);\n  const contentHtml = processedContent.toString(); // Combine the data with the id and content Html\n\n  return _objectSpread({\n    id,\n    contentHtml\n  }, matterResult.data);\n}","map":{"version":3,"sources":["C:/Users/kyzam/Documents/GitHub/SSZ-SimpleSerialize/sszapp/lib/overviewpage.jsx"],"names":["fs","path","matter","remark","html","overviewDirectory","join","process","cwd","getAllOverviewIds","fileNames","readdirSync","map","fileName","params","id","replace","getOverviewPageData","fullPath","fileContents","readFileSync","matterResult","processedContent","use","content","contentHtml","toString","data"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,MAAMC,iBAAiB,GAAGJ,IAAI,CAACK,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,UAAzB,CAA1B;AACA,OAAO,SAASC,iBAAT,GAA6B;AAChC,QAAMC,SAAS,GAAGV,EAAE,CAACW,WAAH,CAAeN,iBAAf,CAAlB;AACA,SAAOK,SAAS,CAACE,GAAV,CAAcC,QAAQ,IAAI;AAC/B,WAAO;AACLC,MAAAA,MAAM,EAAE;AACNC,QAAAA,EAAE,EAAEF,QAAQ,CAACG,OAAT,CAAiB,OAAjB,EAA0B,EAA1B;AADE;AADH,KAAP;AAKD,GANM,CAAP;AAOD;AAED,OAAO,eAAeC,mBAAf,CAAmCF,EAAnC,EAAuC;AAC5C,QAAMG,QAAQ,GAAGjB,IAAI,CAACK,IAAL,CAAUD,iBAAV,EAA8B,GAAEU,EAAG,KAAnC,CAAjB;AACA,QAAMI,YAAY,GAAGnB,EAAE,CAACoB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB,CAF4C,CAI5C;;AACA,QAAMG,YAAY,GAAGnB,MAAM,CAACiB,YAAD,CAA3B,CAL4C,CAO3C;;AACD,QAAMG,gBAAgB,GAAG,MAAMnB,MAAM,GACpCoB,GAD8B,CAC1BnB,IAD0B,EAE9BG,OAF8B,CAEtBc,YAAY,CAACG,OAFS,CAA/B;AAGA,QAAMC,WAAW,GAAGH,gBAAgB,CAACI,QAAjB,EAApB,CAX4C,CAa5C;;AACA;AACEX,IAAAA,EADF;AAEEU,IAAAA;AAFF,KAGKJ,YAAY,CAACM,IAHlB;AAKD","sourcesContent":["import fs from 'fs';\r\nimport path from 'path';\r\nimport matter from 'gray-matter';\r\nimport remark from 'remark';\r\nimport html from 'remark-html';\r\n\r\nconst overviewDirectory = path.join(process.cwd(), 'overview')\r\nexport function getAllOverviewIds() {\r\n    const fileNames = fs.readdirSync(overviewDirectory)\r\n    return fileNames.map(fileName => {\r\n      return {\r\n        params: {\r\n          id: fileName.replace(/\\.md$/, '')\r\n        }\r\n      }\r\n    })\r\n  }\r\n  \r\n  export async function getOverviewPageData(id) {\r\n    const fullPath = path.join(overviewDirectory, `${id}.md`)\r\n    const fileContents = fs.readFileSync(fullPath, 'utf8')\r\n  \r\n    // Use gray-matter to parse the post metadata section\r\n    const matterResult = matter(fileContents)\r\n\r\n     // Use remark to convert markdown into HTML string\r\n    const processedContent = await remark()\r\n    .use(html)\r\n    .process(matterResult.content)\r\n    const contentHtml = processedContent.toString()\r\n  \r\n    // Combine the data with the id and content Html\r\n    return {\r\n      id,\r\n      contentHtml,\r\n      ...matterResult.data\r\n    }\r\n  }\r\n  "]},"metadata":{},"sourceType":"module"}