{"pageProps":{"overviewPageData":{"id":"mixin","contentHtml":"<h2>Merkle Mix-ins</h2>\n<p>Construct: <code>Mix(core, tag)</code></p>\n<p>To tag specific information (\"<code>tag</code>\" here) to a root value (\"<code>core</code>\"), e.g. a length of the contents the <code>core</code> represents.</p>\n<p>This merkleization step is simply: <code>H(core, tag)</code>, with both inputs left-padded to to a full 32 bytes.</p>\n<p>SSZ is consistent with merkleizing in these tags to the right: it avoids a kink of branch nodes in common proof encodings.\r\nI.e. the left-most contents value and its branch of witness nodes go straight to the root.</p>\n<p>In the spec the following function definition is used when mixing in a number:</p>\n<p><strong><code>mix_in_num(root, num)</code></strong>: Given a <code>root</code> and a <code>num</code> (<code>\"uint256\"</code> little-endian serialization) return <code>hash(root ++ num)</code> (the <code>++</code> is concatenation).</p>\n","title":"Merkle Mix-ins","section":"Merkleization"}},"__N_SSG":true}