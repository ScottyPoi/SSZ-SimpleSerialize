{"pageProps":{"overviewPageData":{"id":"chunkify","contentHtml":"<h2>Chunkify</h2>\n<p><code>chunks</code> are <code>Bytes32</code> intermediate merkle values, used for e.g. <a href=\"./subtree_merkleization.md\">subtree merkleization</a> leafs.</p>\n<h2><code>chunkify</code></h2>\n<h3>Complex sequences</h3>\n<p>Sequences that are not homogeneously typed, or not of basic values or bits, are not packed.\r\nInstead, the <code>chunks</code> are the <code>hash_tree_root</code>s for each of the values.</p>\n<h3>Basic sequences / bitfields</h3>\n<p>To convert a homogeneously typed sequence of basic values or bits into chunks, the values are packed.</p>\n<p>Chunkification of <code>elements</code> of a sequence type <code>T</code> is defined as following:</p>\n<h4>For basic elements:</h4>\n<p>Given ordered <code>elements</code> of the same basic type:</p>\n<ul>\n<li>Partition the elements into chunks: split the elements in groups of consecutive <code>32 / size_of(B)</code> elements.\n<ul>\n<li>The last partition may not be full.</li>\n</ul>\n</li>\n<li>Serialize the elements in each partition, and tightly pack the partition into a chunk (no padding between elements).\n<ul>\n<li>If the last-partition is not full, it is right-padded with zero bytes.</li>\n</ul>\n</li>\n</ul>\n<h4>For bitfields</h4>\n<ul>\n<li>Serialize the Bitlist or bitvector.</li>\n<li>The length-delimiting bit for bitlists is excluded: bitlists mix-in the bit-length and do not need the delimiting bit.</li>\n<li>Right-pad the serialized bytes to a multiple of 32.</li>\n<li>Partition into chunks: split the bytes into groups of consecutive <code>32</code> bytes</li>\n</ul>\n<h2><code>chunk_count</code></h2>\n<p><code>chunk_count(type)</code>: calculate the amount of leafs for merkleization of the type.</p>\n<ul>\n<li>all basic types: <code>1</code></li>\n<li><code>Bitlist[N]</code> and <code>Bitvector[N]</code>: <code>(N + 255) // 256</code> (dividing by chunk size, rounding up)</li>\n<li><code>List[B, N]</code> and <code>Vector[B, N]</code>, where <code>B</code> is a basic type: <code>(N * size_of(B) + 31) // 32</code> (dividing by chunk size, rounding up)</li>\n<li><code>List[C, N]</code> and <code>Vector[C, N]</code>, where <code>C</code> is a composite type: <code>N</code></li>\n<li>containers: <code>len(fields)</code></li>\n</ul>\n","title":"Chunkify","section":"Merkleization"}},"__N_SSG":true}