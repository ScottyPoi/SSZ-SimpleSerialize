{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nconst specsDirectory = path.join(process.cwd(), 'specs');\nexport function getSortedspecsData() {\n  // Get file names under /specs\n  const fileNames = fs.readdirSync(specsDirectory);\n  const allSpecsData = fileNames.map(fileName => {\n    // Remove \".md\" from file name to get id\n    const id = fileName.replace(/\\.md$/, ''); // Read markdown file as string\n\n    const fullPath = path.join(specsDirectory, fileName);\n    const fileContents = fs.readFileSync(fullPath, 'utf8'); // Use gray-matter to parse the post metadata section\n\n    const matterResult = matter(fileContents); // Combine the data with the id\n\n    return _objectSpread({\n      id\n    }, matterResult.data);\n  }); // Sort specs by date\n\n  return allSpecsData.sort((a, b) => {\n    if (a.date < b.date) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/kyzam/Documents/GitHub/SSZ-SimpleSerialize/sszapp/lib/sszspecs.js"],"names":["fs","path","matter","specsDirectory","join","process","cwd","getSortedspecsData","fileNames","readdirSync","allSpecsData","map","fileName","id","replace","fullPath","fileContents","readFileSync","matterResult","data","sort","a","b","date"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,MAAMC,cAAc,GAAGF,IAAI,CAACG,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,OAAzB,CAAvB;AAEA,OAAO,SAASC,kBAAT,GAA8B;AACnC;AACA,QAAMC,SAAS,GAAGR,EAAE,CAACS,WAAH,CAAeN,cAAf,CAAlB;AACA,QAAMO,YAAY,GAAGF,SAAS,CAACG,GAAV,CAAcC,QAAQ,IAAI;AAC7C;AACA,UAAMC,EAAE,GAAGD,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAX,CAF6C,CAI7C;;AACA,UAAMC,QAAQ,GAAGd,IAAI,CAACG,IAAL,CAAUD,cAAV,EAA0BS,QAA1B,CAAjB;AACA,UAAMI,YAAY,GAAGhB,EAAE,CAACiB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB,CAN6C,CAQ7C;;AACA,UAAMG,YAAY,GAAGhB,MAAM,CAACc,YAAD,CAA3B,CAT6C,CAW7C;;AACA;AACEH,MAAAA;AADF,OAEKK,YAAY,CAACC,IAFlB;AAID,GAhBoB,CAArB,CAHmC,CAoBnC;;AACA,SAAOT,YAAY,CAACU,IAAb,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACjC,QAAID,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAf,EAAqB;AACnB,aAAO,CAAP;AACD,KAFD,MAEO;AACL,aAAO,CAAC,CAAR;AACD;AACF,GANM,CAAP;AAOD","sourcesContent":["import fs from 'fs'\r\nimport path from 'path'\r\nimport matter from 'gray-matter'\r\n\r\nconst specsDirectory = path.join(process.cwd(), 'specs')\r\n\r\nexport function getSortedspecsData() {\r\n  // Get file names under /specs\r\n  const fileNames = fs.readdirSync(specsDirectory)\r\n  const allSpecsData = fileNames.map(fileName => {\r\n    // Remove \".md\" from file name to get id\r\n    const id = fileName.replace(/\\.md$/, '')\r\n\r\n    // Read markdown file as string\r\n    const fullPath = path.join(specsDirectory, fileName)\r\n    const fileContents = fs.readFileSync(fullPath, 'utf8')\r\n\r\n    // Use gray-matter to parse the post metadata section\r\n    const matterResult = matter(fileContents)\r\n\r\n    // Combine the data with the id\r\n    return {\r\n      id,\r\n      ...matterResult.data\r\n    }\r\n  })\r\n  // Sort specs by date\r\n  return allSpecsData.sort((a, b) => {\r\n    if (a.date < b.date) {\r\n      return 1\r\n    } else {\r\n      return -1\r\n    }\r\n  })\r\n}"]},"metadata":{},"sourceType":"module"}