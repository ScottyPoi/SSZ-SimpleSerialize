{"ast":null,"code":"import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState } from 'react';\nimport './Node.module.css';\nexport default function Node(_ref) {\n  let {\n    label,\n    backgroundColor\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"label\", \"backgroundColor\"]);\n\n  const {\n    0: on,\n    1: setOn\n  } = useState(false);\n  let lit = on ? 'on' : 'off';\n  const size = props.size == 'small' ? 'small' : 'large';\n  return _jsx(\"button\", _objectSpread(_objectSpread({}, props), {}, {\n    className: `node node-${size} node-${lit}`,\n    style: backgroundColor && {\n      backgroundColor\n    },\n    onClick: () => !on ? setOn(true) : setOn(false),\n    children: label\n  }));\n}\nNode.defaultProps = {\n  label: \"Foobarbaz\",\n  backgroundColor: null,\n  size: 'small'\n};","map":null,"metadata":{},"sourceType":"module"}