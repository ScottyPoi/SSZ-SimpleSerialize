{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nconst specsDirectory = path.join(process.cwd(), 'specs');\nexport function getSpecsData() {\n  // Get file names under /specs\n  const fileNames = fs.readdirSync(specsDirectory);\n  const SpecsData = fileNames.map(fileName => {\n    // Remove \".md\" from file name to get id\n    const id = fileName.replace(/\\.md$/, ''); // Read markdown file as string\n\n    const fileContents = fs.readFileSync(fileName, 'utf8'); // Use gray-matter to parse the post metadata section\n\n    const matterResult = matter(fileContents);\n    return _objectSpread({\n      id\n    }, matterResult.data);\n  });\n  return SpecsData;\n}","map":{"version":3,"sources":["C:/Users/kyzam/Documents/GitHub/SSZ-SimpleSerialize/sszapp/lib/sszspecs.js"],"names":["fs","path","matter","specsDirectory","join","process","cwd","getSpecsData","fileNames","readdirSync","SpecsData","map","fileName","id","replace","fileContents","readFileSync","matterResult","data"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,MAAMC,cAAc,GAAGF,IAAI,CAACG,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,OAAzB,CAAvB;AAEA,OAAO,SAASC,YAAT,GAAwB;AAC7B;AAGE,QAAMC,SAAS,GAAGR,EAAE,CAACS,WAAH,CAAeN,cAAf,CAAlB;AACA,QAAMO,SAAS,GAAGF,SAAS,CAACG,GAAV,CAAeC,QAAD,IAAc;AAI1C;AACA,UAAMC,EAAE,GAAGD,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAX,CAL0C,CAO1C;;AACA,UAAMC,YAAY,GAAGf,EAAE,CAACgB,YAAH,CAAgBJ,QAAhB,EAA0B,MAA1B,CAArB,CAR0C,CAU1C;;AACA,UAAMK,YAAY,GAAGf,MAAM,CAACa,YAAD,CAA3B;AAEA;AACIF,MAAAA;AADJ,OAEOI,YAAY,CAACC,IAFpB;AAKH,GAlBiB,CAAlB;AAoBA,SAAOR,SAAP;AACH","sourcesContent":["import fs from 'fs'\r\nimport path from 'path'\r\nimport matter from 'gray-matter'\r\n\r\nconst specsDirectory = path.join(process.cwd(), 'specs')\r\n\r\nexport function getSpecsData() {\r\n  // Get file names under /specs\r\n\r\n    \r\n    const fileNames = fs.readdirSync(specsDirectory)\r\n    const SpecsData = fileNames.map((fileName) => {\r\n\r\n        \r\n\r\n        // Remove \".md\" from file name to get id\r\n        const id = fileName.replace(/\\.md$/, '')\r\n\r\n        // Read markdown file as string\r\n        const fileContents = fs.readFileSync(fileName, 'utf8')\r\n\r\n        // Use gray-matter to parse the post metadata section\r\n        const matterResult = matter(fileContents)\r\n\r\n        return {\r\n            id,\r\n            ...matterResult.data\r\n        }\r\n    \r\n    })\r\n  \r\n    return SpecsData\r\n}"]},"metadata":{},"sourceType":"module"}